/*
 * generated by Xtext 2.10.0
 */
package org.xtext.example.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.xtext.example.entity.EntityPackage;
import org.xtext.example.entity.Model;
import org.xtext.example.entity.expression;
import org.xtext.example.entity.expression_unity;
import org.xtext.example.entity.operator;
import org.xtext.example.services.EntityGrammarAccess;

@SuppressWarnings("all")
public class EntitySemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private EntityGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == EntityPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case EntityPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case EntityPackage.EXPRESSION:
				sequence_expression(context, (expression) semanticObject); 
				return; 
			case EntityPackage.EXPRESSION_UNITY:
				sequence_expression_unity(context, (expression_unity) semanticObject); 
				return; 
			case EntityPackage.OPERATOR:
				sequence_operator(context, (operator) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     elements+=expression
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     expression returns expression
	 *
	 * Constraint:
	 *     (expressao_un=expression_unity (operador=operator expressao=expression)?)
	 */
	protected void sequence_expression(ISerializationContext context, expression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     expression_unity returns expression_unity
	 *
	 * Constraint:
	 *     ((menos=MINUS expressao_un=expression_unity) | (abre_paren=LPAREN expressao=expression fecha_paren=RPAREN) | valor=INT)
	 */
	protected void sequence_expression_unity(ISerializationContext context, expression_unity semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     operator returns operator
	 *
	 * Constraint:
	 *     (mais=PLUS | menos=MINUS | mult=MULT | div=DIV)
	 */
	protected void sequence_operator(ISerializationContext context, operator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
