/*
 * generated by Xtext 2.10.0
 */
package org.xtext.example.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class EntityGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Entity.Model");
		private final Assignment cElementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cElementsExpressionParserRuleCall_0 = (RuleCall)cElementsAssignment.eContents().get(0);
		
		//Model:
		//	elements+=expression;
		@Override public ParserRule getRule() { return rule; }
		
		//elements+=expression
		public Assignment getElementsAssignment() { return cElementsAssignment; }
		
		//expression
		public RuleCall getElementsExpressionParserRuleCall_0() { return cElementsExpressionParserRuleCall_0; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Entity.expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExpressao_unAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExpressao_unExpression_unityParserRuleCall_0_0 = (RuleCall)cExpressao_unAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOperadorAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cOperadorOperatorParserRuleCall_1_0_0 = (RuleCall)cOperadorAssignment_1_0.eContents().get(0);
		private final Assignment cExpressaoAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpressaoExpressionParserRuleCall_1_1_0 = (RuleCall)cExpressaoAssignment_1_1.eContents().get(0);
		
		//expression:
		//	expressao_un=expression_unity (operador=operator expressao=expression)?;
		@Override public ParserRule getRule() { return rule; }
		
		//expressao_un=expression_unity (operador=operator expressao=expression)?
		public Group getGroup() { return cGroup; }
		
		//expressao_un=expression_unity
		public Assignment getExpressao_unAssignment_0() { return cExpressao_unAssignment_0; }
		
		//expression_unity
		public RuleCall getExpressao_unExpression_unityParserRuleCall_0_0() { return cExpressao_unExpression_unityParserRuleCall_0_0; }
		
		//(operador=operator expressao=expression)?
		public Group getGroup_1() { return cGroup_1; }
		
		//operador=operator
		public Assignment getOperadorAssignment_1_0() { return cOperadorAssignment_1_0; }
		
		//operator
		public RuleCall getOperadorOperatorParserRuleCall_1_0_0() { return cOperadorOperatorParserRuleCall_1_0_0; }
		
		//expressao=expression
		public Assignment getExpressaoAssignment_1_1() { return cExpressaoAssignment_1_1; }
		
		//expression
		public RuleCall getExpressaoExpressionParserRuleCall_1_1_0() { return cExpressaoExpressionParserRuleCall_1_1_0; }
	}
	public class Expression_unityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Entity.expression_unity");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cMenosAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cMenosMINUSTerminalRuleCall_0_0_0 = (RuleCall)cMenosAssignment_0_0.eContents().get(0);
		private final Assignment cExpressao_unAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cExpressao_unExpression_unityParserRuleCall_0_1_0 = (RuleCall)cExpressao_unAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cAbre_parenAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cAbre_parenLPARENTerminalRuleCall_1_0_0 = (RuleCall)cAbre_parenAssignment_1_0.eContents().get(0);
		private final Assignment cExpressaoAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpressaoExpressionParserRuleCall_1_1_0 = (RuleCall)cExpressaoAssignment_1_1.eContents().get(0);
		private final Assignment cFecha_parenAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cFecha_parenRPARENTerminalRuleCall_1_2_0 = (RuleCall)cFecha_parenAssignment_1_2.eContents().get(0);
		private final Assignment cValorAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cValorINTTerminalRuleCall_2_0 = (RuleCall)cValorAssignment_2.eContents().get(0);
		
		//expression_unity:
		//	menos=MINUS expressao_un=expression_unity | abre_paren=LPAREN expressao=expression fecha_paren=RPAREN | valor=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//menos=MINUS expressao_un=expression_unity | abre_paren=LPAREN expressao=expression fecha_paren=RPAREN | valor=INT
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//menos=MINUS expressao_un=expression_unity
		public Group getGroup_0() { return cGroup_0; }
		
		//menos=MINUS
		public Assignment getMenosAssignment_0_0() { return cMenosAssignment_0_0; }
		
		//MINUS
		public RuleCall getMenosMINUSTerminalRuleCall_0_0_0() { return cMenosMINUSTerminalRuleCall_0_0_0; }
		
		//expressao_un=expression_unity
		public Assignment getExpressao_unAssignment_0_1() { return cExpressao_unAssignment_0_1; }
		
		//expression_unity
		public RuleCall getExpressao_unExpression_unityParserRuleCall_0_1_0() { return cExpressao_unExpression_unityParserRuleCall_0_1_0; }
		
		//abre_paren=LPAREN expressao=expression fecha_paren=RPAREN
		public Group getGroup_1() { return cGroup_1; }
		
		//abre_paren=LPAREN
		public Assignment getAbre_parenAssignment_1_0() { return cAbre_parenAssignment_1_0; }
		
		//LPAREN
		public RuleCall getAbre_parenLPARENTerminalRuleCall_1_0_0() { return cAbre_parenLPARENTerminalRuleCall_1_0_0; }
		
		//expressao=expression
		public Assignment getExpressaoAssignment_1_1() { return cExpressaoAssignment_1_1; }
		
		//expression
		public RuleCall getExpressaoExpressionParserRuleCall_1_1_0() { return cExpressaoExpressionParserRuleCall_1_1_0; }
		
		//fecha_paren=RPAREN
		public Assignment getFecha_parenAssignment_1_2() { return cFecha_parenAssignment_1_2; }
		
		//RPAREN
		public RuleCall getFecha_parenRPARENTerminalRuleCall_1_2_0() { return cFecha_parenRPARENTerminalRuleCall_1_2_0; }
		
		//valor=INT
		public Assignment getValorAssignment_2() { return cValorAssignment_2; }
		
		//INT
		public RuleCall getValorINTTerminalRuleCall_2_0() { return cValorINTTerminalRuleCall_2_0; }
	}
	public class OperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Entity.operator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cMaisAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cMaisPLUSTerminalRuleCall_0_0 = (RuleCall)cMaisAssignment_0.eContents().get(0);
		private final Assignment cMenosAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cMenosMINUSTerminalRuleCall_1_0 = (RuleCall)cMenosAssignment_1.eContents().get(0);
		private final Assignment cMultAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cMultMULTTerminalRuleCall_2_0 = (RuleCall)cMultAssignment_2.eContents().get(0);
		private final Assignment cDivAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cDivDIVTerminalRuleCall_3_0 = (RuleCall)cDivAssignment_3.eContents().get(0);
		
		//operator:
		//	mais=PLUS
		//	| menos=MINUS
		//	| mult=MULT
		//	| div=DIV;
		@Override public ParserRule getRule() { return rule; }
		
		//mais=PLUS | menos=MINUS | mult=MULT | div=DIV
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//mais=PLUS
		public Assignment getMaisAssignment_0() { return cMaisAssignment_0; }
		
		//PLUS
		public RuleCall getMaisPLUSTerminalRuleCall_0_0() { return cMaisPLUSTerminalRuleCall_0_0; }
		
		//menos=MINUS
		public Assignment getMenosAssignment_1() { return cMenosAssignment_1; }
		
		//MINUS
		public RuleCall getMenosMINUSTerminalRuleCall_1_0() { return cMenosMINUSTerminalRuleCall_1_0; }
		
		//mult=MULT
		public Assignment getMultAssignment_2() { return cMultAssignment_2; }
		
		//MULT
		public RuleCall getMultMULTTerminalRuleCall_2_0() { return cMultMULTTerminalRuleCall_2_0; }
		
		//div=DIV
		public Assignment getDivAssignment_3() { return cDivAssignment_3; }
		
		//DIV
		public RuleCall getDivDIVTerminalRuleCall_3_0() { return cDivDIVTerminalRuleCall_3_0; }
	}
	
	
	private final ModelElements pModel;
	private final ExpressionElements pExpression;
	private final Expression_unityElements pExpression_unity;
	private final OperatorElements pOperator;
	private final TerminalRule tMINUS;
	private final TerminalRule tPLUS;
	private final TerminalRule tDIV;
	private final TerminalRule tMULT;
	private final TerminalRule tLPAREN;
	private final TerminalRule tRPAREN;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public EntityGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pExpression = new ExpressionElements();
		this.pExpression_unity = new Expression_unityElements();
		this.pOperator = new OperatorElements();
		this.tMINUS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Entity.MINUS");
		this.tPLUS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Entity.PLUS");
		this.tDIV = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Entity.DIV");
		this.tMULT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Entity.MULT");
		this.tLPAREN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Entity.LPAREN");
		this.tRPAREN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Entity.RPAREN");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.Entity".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	elements+=expression;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//expression:
	//	expressao_un=expression_unity (operador=operator expressao=expression)?;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//expression_unity:
	//	menos=MINUS expressao_un=expression_unity | abre_paren=LPAREN expressao=expression fecha_paren=RPAREN | valor=INT;
	public Expression_unityElements getExpression_unityAccess() {
		return pExpression_unity;
	}
	
	public ParserRule getExpression_unityRule() {
		return getExpression_unityAccess().getRule();
	}
	
	//operator:
	//	mais=PLUS
	//	| menos=MINUS
	//	| mult=MULT
	//	| div=DIV;
	public OperatorElements getOperatorAccess() {
		return pOperator;
	}
	
	public ParserRule getOperatorRule() {
		return getOperatorAccess().getRule();
	}
	
	//terminal MINUS:
	//	'-';
	public TerminalRule getMINUSRule() {
		return tMINUS;
	}
	
	//terminal PLUS:
	//	'+';
	public TerminalRule getPLUSRule() {
		return tPLUS;
	}
	
	//terminal DIV:
	//	'/';
	public TerminalRule getDIVRule() {
		return tDIV;
	}
	
	//terminal MULT:
	//	'*';
	public TerminalRule getMULTRule() {
		return tMULT;
	}
	
	//terminal LPAREN:
	//	'(';
	public TerminalRule getLPARENRule() {
		return tLPAREN;
	}
	
	//terminal RPAREN:
	//	')';
	public TerminalRule getRPARENRule() {
		return tRPAREN;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
