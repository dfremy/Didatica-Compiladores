/*
 * generated by Xtext 2.10.0
 */
grammar InternalEntity;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.example.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.services.EntityGrammarAccess;

}

@parser::members {

 	private EntityGrammarAccess grammarAccess;

    public InternalEntityParser(TokenStream input, EntityGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected EntityGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getModelAccess().getElementsExpressionParserRuleCall_0());
			}
			lv_elements_0_0=ruleexpression
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getModelRule());
				}
				add(
					$current,
					"elements",
					lv_elements_0_0,
					"org.xtext.example.Entity.expression");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleexpression
entryRuleexpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	iv_ruleexpression=ruleexpression
	{ $current=$iv_ruleexpression.current; }
	EOF;

// Rule expression
ruleexpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getExpressionAccess().getExpressao_unExpression_unityParserRuleCall_0_0());
				}
				lv_expressao_un_0_0=ruleexpression_unity
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpressionRule());
					}
					set(
						$current,
						"expressao_un",
						lv_expressao_un_0_0,
						"org.xtext.example.Entity.expression_unity");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getExpressionAccess().getOperadorOperatorParserRuleCall_1_0_0());
					}
					lv_operador_1_0=ruleoperator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExpressionRule());
						}
						set(
							$current,
							"operador",
							lv_operador_1_0,
							"org.xtext.example.Entity.operator");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getExpressionAccess().getExpressaoExpressionParserRuleCall_1_1_0());
					}
					lv_expressao_2_0=ruleexpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExpressionRule());
						}
						set(
							$current,
							"expressao",
							lv_expressao_2_0,
							"org.xtext.example.Entity.expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleexpression_unity
entryRuleexpression_unity returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpression_unityRule()); }
	iv_ruleexpression_unity=ruleexpression_unity
	{ $current=$iv_ruleexpression_unity.current; }
	EOF;

// Rule expression_unity
ruleexpression_unity returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_menos_0_0=RULE_MINUS
					{
						newLeafNode(lv_menos_0_0, grammarAccess.getExpression_unityAccess().getMenosMINUSTerminalRuleCall_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getExpression_unityRule());
						}
						setWithLastConsumed(
							$current,
							"menos",
							lv_menos_0_0,
							"org.xtext.example.Entity.MINUS");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getExpression_unityAccess().getExpressao_unExpression_unityParserRuleCall_0_1_0());
					}
					lv_expressao_un_1_0=ruleexpression_unity
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExpression_unityRule());
						}
						set(
							$current,
							"expressao_un",
							lv_expressao_un_1_0,
							"org.xtext.example.Entity.expression_unity");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				(
					lv_abre_paren_2_0=RULE_LPAREN
					{
						newLeafNode(lv_abre_paren_2_0, grammarAccess.getExpression_unityAccess().getAbre_parenLPARENTerminalRuleCall_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getExpression_unityRule());
						}
						setWithLastConsumed(
							$current,
							"abre_paren",
							lv_abre_paren_2_0,
							"org.xtext.example.Entity.LPAREN");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getExpression_unityAccess().getExpressaoExpressionParserRuleCall_1_1_0());
					}
					lv_expressao_3_0=ruleexpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExpression_unityRule());
						}
						set(
							$current,
							"expressao",
							lv_expressao_3_0,
							"org.xtext.example.Entity.expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					lv_fecha_paren_4_0=RULE_RPAREN
					{
						newLeafNode(lv_fecha_paren_4_0, grammarAccess.getExpression_unityAccess().getFecha_parenRPARENTerminalRuleCall_1_2_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getExpression_unityRule());
						}
						setWithLastConsumed(
							$current,
							"fecha_paren",
							lv_fecha_paren_4_0,
							"org.xtext.example.Entity.RPAREN");
					}
				)
			)
		)
		    |
		(
			(
				lv_valor_5_0=RULE_INT
				{
					newLeafNode(lv_valor_5_0, grammarAccess.getExpression_unityAccess().getValorINTTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getExpression_unityRule());
					}
					setWithLastConsumed(
						$current,
						"valor",
						lv_valor_5_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

// Entry rule entryRuleoperator
entryRuleoperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOperatorRule()); }
	iv_ruleoperator=ruleoperator
	{ $current=$iv_ruleoperator.current; }
	EOF;

// Rule operator
ruleoperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_mais_0_0=RULE_PLUS
				{
					newLeafNode(lv_mais_0_0, grammarAccess.getOperatorAccess().getMaisPLUSTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getOperatorRule());
					}
					setWithLastConsumed(
						$current,
						"mais",
						lv_mais_0_0,
						"org.xtext.example.Entity.PLUS");
				}
			)
		)
		    |
		(
			(
				lv_menos_1_0=RULE_MINUS
				{
					newLeafNode(lv_menos_1_0, grammarAccess.getOperatorAccess().getMenosMINUSTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getOperatorRule());
					}
					setWithLastConsumed(
						$current,
						"menos",
						lv_menos_1_0,
						"org.xtext.example.Entity.MINUS");
				}
			)
		)
		    |
		(
			(
				lv_mult_2_0=RULE_MULT
				{
					newLeafNode(lv_mult_2_0, grammarAccess.getOperatorAccess().getMultMULTTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getOperatorRule());
					}
					setWithLastConsumed(
						$current,
						"mult",
						lv_mult_2_0,
						"org.xtext.example.Entity.MULT");
				}
			)
		)
		    |
		(
			(
				lv_div_3_0=RULE_DIV
				{
					newLeafNode(lv_div_3_0, grammarAccess.getOperatorAccess().getDivDIVTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getOperatorRule());
					}
					setWithLastConsumed(
						$current,
						"div",
						lv_div_3_0,
						"org.xtext.example.Entity.DIV");
				}
			)
		)
	)
;

RULE_MINUS : '-';

RULE_PLUS : '+';

RULE_DIV : '/';

RULE_MULT : '*';

RULE_LPAREN : '(';

RULE_RPAREN : ')';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
